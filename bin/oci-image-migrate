#!/usr/bin/env python2.7

# oci-utils
#
# Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown
# at http://oss.oracle.com/licenses/upl.

"""
Script to migrate on-premise virtual servers to the Oracle Cloud
Infrastructure. The candidate image needs to comply with:
- BIOS boot;
- image size is maximum 300GB;
- contain one disk containing Master Boot Record and boot loader;
- no additional volumes are required to complete the boot process;
- the boot and root partitions are not encrypted;
- the image is a single file in VMDK or QCOW2 format;
- the boot loader uses UUID or LVM to locate the boot volume;
- the network configuration does not contain hardcoded MAC addresses;
"""

import argparse
import importlib
import logging
import os
import pkgutil
import stat
import sys

# for the sake of testing
sys.path.append('/omv/data/git_pycharm/oci-utils/lib')
# import oci_utils.migrate.qcow2 as qcow2
# import oci_utils.migrate.vmdk as vmdk
# from oci_utils import migrate
# from oci_utils.migrate import migrate_utils as migrate
from oci_utils.migrate import migrate_utils as migrate_utils


logger = logging.getLogger('oci-image-migrate')

#
# Dictionary containing utilities which might be needed with the packages
# which provide them.
helpers_list = {'qemu-nbd': 'qemu-img', 'qemu-img': 'qemu-img',
                'vbox-img': 'VirtualbBox', 'blkid': 'util-linux',
                'lsblk': 'util-linux', 'sfdisk': 'util-linux',
                'fdisk': 'util-linux', 'parted': 'parted',
                'partx': 'util-linux', 'lvmdiskscan': 'lvm2'}


def debug(message):
    """
    Writes a message to stderr if debugflag is set.

    Parameters
    ----------
        message: str
            The message
    Returns
    -------
        No return value
    """
    if debugflag:
        sys.stderr.write('%s\n' % message)


def parse_args():
    """
    Parse the command line arguments and return an object representing the
    command line (as returned by argparse's parse_args())
    arguments:
     -i|--iimage <on-premise image>; mandatory.
     -b|--bucket <bucket name>; mandatory.
     -o|--oimage <output image name>; optional.
     --debug sets loglevel to INFO.
     -q|--quiet sets loglevel to CRITICAL.
     -v|--verbose produces verbose output.
     -h|--help

    Returns
    -------
        The command line namespace.
    """
    parser = argparse.ArgumentParser(
        description='Utility to support preparation of on-premise legacy '
                    'images for importing in the Oracle Cloud Infrastructure.',
        add_help=False)
    #requiredargs = parser.add_argument_group('mandatory arguments')
    parser.add_argument('-i', '--iimage',
                              action='store',
                              dest='inputimage',
                              required=('--bucket' in sys.argv or '-b' in sys.argv),
                              help='The on-premise image for migration to OCI.')
    parser.add_argument('-b', '--bucket',
                              action='store',
                              dest='bucketname',
                              required=('--iimage' in sys.argv or '-i' in sys.argv),
                              help='The destination bucket in OCI to store the converted image.')
    parser.add_argument('-o', '--oimage',
                        action='store',
                        dest='outputimage',
                        help='The output image name.')
    parser.add_argument('--debug',
                        action='store_true',
                        dest='debugflag',
                        default=False,
                        help=argparse.SUPPRESS)
    parser.add_argument('--quiet', '-q',
                        action='store_true',
                        dest='quietflag',
                        help='Suppress information messages')
    parser.add_argument('--verbose', '-v',
                        action='store_true',
                        dest='verboseflag',
                        help='Show verbose information.')
    parser.add_argument('--help',
                        action='help',
                        help='Display this help')

    args = parser.parse_args()

    return args


def is_root():
    """
    Verify is operator is the root user.

    Returns
    -------
        bool: True on success, False otherwise.
    """
    if os.getuid() == 0:
        return True
    else:
        return False


def import_formats():
    """
    Import modules which handle different image formats and construct the
    format data dictionary.

    Returns
    -------
        dict: Dictionary containing for each image format at least:
              { magic number : { name : <type name>,
                                 module : <module name>,
                                 clazz : <the class name>,
                                 prereq : <prequisites dictionary>
                                }
              }
    """
    attr_format = 'format_data'
    imagetypes = dict()
    packagename = 'oci_utils.migrate'
    pkg = __import__(packagename)
    logger.debug('pkg name: %s' % pkg)
    path = os.path.dirname(sys.modules.get(packagename).__file__)
    logger.debug('path: %s' % path)
    for _, module_name, _ in pkgutil.iter_modules([path]):
        type_name = packagename + '.' + module_name
        logger.debug('type_name: %s' % type_name)
        try:
            impret = importlib.import_module(type_name)
            logger.debug('import result: %s' % impret)
            attrret = getattr(sys.modules[type_name], attr_format)
            logger.debug('attribute format_data: %s' % attrret)
            imagetypes.update(attrret)
        except Exception as e:
            logger.debug('attribute %s not found in %s: %s' % (attr_format, type_name, str(e)))
    return imagetypes


def show_utilities(found, missing):
    """
    Display the status of the required utilities.

    Parameters
    ----------
    found: list
        List of found utilities.
    missing: list
        List of missing utilities.

    Returns
    -------
        No return value.
    """
    print '\n  %30s\n%s' % ('  Utilities found:', '  ' + '-'*60)
    for util in found:
        print '  %30s' % util
    print '\n  %30s\n%s' % ('  Utilities not found:', '  ' + '-'*60)
    for util in missing:
        print '  %30s, needs package %s' % (util, helpers_list[util])


def show_supported_formats_data(thisdict):
    """
    Display the data collected from the image type modules.

    Parameters
    ----------
    thisdict: dict
        Data about the supported image types.

    Returns
    -------
        No return value.
    """
    migrate_utils.progmsg('show_supported_formats_data')
    print '\n  %25s\n  %25s\n  %25s : %-20s\n  %25s   %-20s' % ('Supported image formats', '-'*25, 'Magic Key', 'Format data', '-'*20, '-'*20)
    for key in sorted(thisdict):
        print '  %25s : ' % key
        thissubdict = thisdict[key]
        for yek in sorted(thissubdict):
            print '  %35s : %s' % (yek, thissubdict[yek])
        print '\n'


def get_magic_data(image):
    """
    Perform elementary on the file.

    Parameters
    ----------
    image: str
        Full path of the image file.

    Returns
    -------
        str:
            magic string on success, None otherwise.
    """
    magic_hex = None
    logger.info('Image full path name: %s' % image)
    #
    # file exists
    if os.path.exists(image):
        logger.debug('Image %s exists' % image)
    #
    # is a regular file
        image_st = os.stat(image)[stat.ST_MODE]
        if stat.S_ISREG(image_st):
            logger.debug('Image %s is regular file' % image)
    #
    # is readable
            try:
                with open(image, 'rb') as f:
                    magic = f.read(4)
                    magic_hex = magic.encode("hex")
                    logger.debug('Image magic number: %8s' % magic_hex)
            except Exception, e:
                logger.critical('Image %s is not accessible: 0X%s' % (image, str(e)))
        else:
            logger.critical('Image %s is not a regular file' % image)
    else:
        logger.critical('Image %s does not exists' % image)

    return magic_hex


def collect_image_data(imgobject, imgdefs):
    """
    Verify the prerequisites of the image file with respect to the migration
    to the Oracle Cloud Infrastructure.

    Parameters
    ----------
    imgobject: Qcow2Head or VmdkHead object
        The image object
    imgdefs: dict
        The definition and prerequisite list.

    Returns
    -------
        dict:
            The image data.
    """
    try:
        img_info = imgobject.image_data()
        migrate_utils.show_image_data(imgobject)
    except Exception as e:
        # logger.debug('Unable to collect image data: %s' % str(e))
        logger.critical('Unable to collect or invalid image data: %s' % str(e))
        raise
        # print '  %s\n  Missing utilities, image file contains unsupported data or os errors. Check the logfile. quitting.' % str(e)
        # return False

    # need to return the img_info object in the end...
    return img_info


def test_helpers():
    """
    Verify which utilities are available.

    Returns
    -------
        helpers: List of available utilities.
        missing: List of missing utilities.
    """
    helpers = []
    missing = []
    for util in helpers_list:
        try:
            if migrate_utils.exec_exists(util):
                helpers.append(util)
            else:
                missing.append(util)
        except Exception as e:
            logger.error('utility %s is not installed: %s' % (helpers_list[util], str(e)))
    return helpers, missing


def main():
    """
    Main

    Returns
    -------
        int
            0 on success, 1 otherwise.
    """
    retval = 0
    global debugflag
    global verboseflag

    # qcow2.test()
    # vmdk.test()

    args = parse_args()
    debugflag = args.debugflag
    #
    # Logging:
    # by default is ERROR, is set to INFO by the debug flag, to CRITICAL by
    # the quiet flag; the debug and quiet flag are overruled by the
    # environment variable LOGLEVEL
    _log_l = "ERROR"
    if args.debugflag:
        _log_l = "INFO"
    elif args.quietflag:
        _log_l = "CRITICAL"
    env_log = os.environ.get("LOGLEVEL")
    if env_log in ['NOTSET', 'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']:
        _log_l = env_log
    logging.basicConfig(level=_log_l, filename='/tmp/oci-image-migrate.log', format='%(asctime)s %(filename)s-%(funcName)s(%(lineno)d) [%(levelname)s] %(message)s')
    logger.debug('Log level set to %s' % _log_l)
    #
    # verbose: is False by default
    verboseflag = args.verboseflag
    migrate_utils.verboseflag = verboseflag
    logger.debug('Verbose level set to %s' % verboseflag)
    #
    # Operator needs to be root.
    if not is_root():
        logger.critical('%s needs to be run as root user' % sys.argv[0])
        exit(1)
    #
    # Import the 'format' modules and collect the format data
    supported_formats = import_formats()
    if verboseflag:
        show_supported_formats_data(supported_formats)
    #
    # Check the utilities installed.
    util_list, missing_list = test_helpers()
    logger.debug('%s' % util_list)
    if verboseflag:
        show_utilities(util_list, missing_list)
    #
    # More on command line arguments.
    logger.debug('input image:  %s' % args.inputimage)
    imagepath = args.inputimage
    logger.debug('bucket name:  %s' % args.bucketname)
    bucketname = args.bucketname
    if args.outputimage:
        logger.debug('output name: %s' % args.outputimage)
        outputname = args.outputimage
    #
    # Verify if imagefile is a candidate for migration
    fn_magic = get_magic_data(args.inputimage)
    #
    if fn_magic is not None:
        logger.debug('magic number of %s is %s' % (imagepath, fn_magic))
        if fn_magic in supported_formats:
            imageclazz = supported_formats[fn_magic]
            logger.debug('Type of image %s identified as %s' % (imagepath, imageclazz['name']))
            #
            # locate the class and module
            imageclassdef = getattr(sys.modules['oci_utils.migrate.%s' % supported_formats[fn_magic]['name']], imageclazz['clazz'])
            imageobject = imageclassdef(imagepath, logger)
            #
            # prerequisite check data collection
            try:
                imagedata = collect_image_data(imageobject, imageclazz)
                if imagedata:
                    logger.debug('%s passed verification.' % imagepath)
                else:
                    logger.critical('%s failed image check.' % imagepath)
            except Exception as e:
                logger.critical('%s failed image check: %s' % (imagepath, str(e)))
                print 'Problem detected during investigation of the image %s: %s, exiting.' % (imagepath,str(e))
                return 1
            #
            # prerequisite check
            spec_prerec, msg = imageobject.type_specific_prereq_test()
            if spec_prerec:
                print '\n%s passed the image type specific preqrequisites.' % imagepath
            else:
                print '\n%s failed the image type specific preqrequisites: %s' % (imagepath, msg)
                retval = 1
            gen_prereq = imageobject.generic_prereq_check()
            if gen_prereq:
                print '\n%s passed the generic preqrequisites.' % imagepath
            else:
                print '\n%s failed the generic preqrequisites: %s' % (imagepath, msg)
                retval = 1

        else:
            imageclazz = None
            logger.critical('Type of %s is not identified and/or not supported' % imagepath)
            print '\n  Type of Image file %s is not identified and/or not supported.\n' % imagepath

    else:
        logger.critical('%s is an invalid image' % imagepath)
        retval = 1
    return retval


if __name__ == "__main__":
    sys.exit(main())
