Notes for oci-utils developers:


How to build an oci-utils tarball:

    python3 setup.py sdist

    The tarball is created in the rpmbuild/SOURCES/ subdir


How to bump the version:

    update the version number in setup.py, PKG-INFO and buildrpm/oci-utils.spec


How to build a test RPM:

    python3 setup.py create_rpm

    To install the test package:

    sudo rpm --erase oci-utils; \
    sudo rpm -i rpmbuild/RPMS/noarch/oci-utils-${VER}-1.el7.noarch.rpm

How to test oci-utils:

    (To test directly from the workspace anywhere just skip to step 5)
    0. <build the RPMs>
    0.1 (on target machine, optional) yum install python-pip
    0.2 (on target machine, optional) pip3 install --upgrade pip
    0.3 (on target machine, optional) pip3 install setuptools  --upgrade
    1. sudo rpm --erase oci-utils-outest
    2. sudo rpm --install rpmbuild/RPMS/noarch/oci-utils-outest-${VER}-3.fc28.noarch.rpm
    3. sudo -s
    4. cd /opt/oci-utils
       # (make http proxy is set to outside world so setuptool can download dependencies)
    5. python3 setup.py test

How to test ocid:

    Stop the service:

    sudo systemctl stop ocid.service

    Run is manually, with debug messages:

    sudo /usr/libexec/ocid --no-daemon


Enabling debug information in syslogd:

    create /etc/rsyslog.d/debug.conf with this line in it:

    *.debug                      /var/log/debug.log

    Restart rsyslogd:

    sudo systemctl restart rsyslog

Enabling debug messages in ocid:

    create a config file in /etc/oci-utils.conf.d that says:

    [ocid]
    debug = True

    Restart ocid:

    sudo systemctl restart ocid.service

How to test oci-utils.

    Writting Unit tests
        All unit tests must be located under <wks>/tests. There is a special class OciTestCase all unit test must
        inherit from. Tis class is responsible to :
            - instanciate a logger for the (child) test class
            - setup the TreeConfigParser instance to hold test configurations.
                    A TreeConfigParser maintains a set of key/value pair configuration items for tests. see
                    'Unit tests configuration' section for details
        It is important that any tests which has a set-up phase (has a setUp method) call the the one from OciTestCase first

    Unit tests configuration

        Tests configuration are managed by a TreeConfigParser. This parser acts exactly as a configparser.ConfigParser class
        Execept that it handles multiple configuration files at once. Each file is specific to a test, test class, test class module
        and overall test run base. This allows to define per test configuration value with default values on a hierarchical structure
            ex: test call Foo on bar.py module
              class Foo:
                __name__ = my_foo

              c = TreeConfigParser('/var/tmp/',Foo())

              The configuration base (root directory for configuration files) is /var/tmp . Configuration files are expected as follow
              (each level in the hierarchy is optional)
                  /var/tmp/properties.cfg
                  /var/tmp/bar/properties.cfg
                  /var/tmp/bar/Foo/properties.cfg
                  /var/tmp/bar/Foo/my_foo/properties.cfg

              Configuration files will sourced from the highest level to the lowest
              This allow test developer to have fine grain test configuration values

              example: Let's assume we need to define a timeout for a remote service. This timeout has a value of 60 secs for the overall
                test suite. We need this timeout to be lower down to 10 secs for all test under 'bar' module. Finally one test under 'bar' module
                need an infinite timeout
                /var/tmp/properties.cfg
                    [mysection]
                       rest-timeout-secs=60
                /var/tmp/bar/properties.cfg
                    [mysection]
                       rest-timeout-secs=10
                /var/tmp/bar/Foo/properties.cfg
                    [mysection]
                       rest-timeout-secs=-1

                - Querying the value for 'rest-timeout-secs' within a Foo instance will give back -1
                - Querying the value for 'rest-timeout-secs' within an instance of a calss other than Foo in bar module will give back 10
                - A default value for rest-timeout-secs is 60

  Running tests

        A new setuptool command has been defined : "oci_tests". This command is an extension of the 'test' command
        Two new options are defined:
            --tests-base: this is used to specify the base directory where tests configuration files and recorded command repository is
            --test-runner: this is used to change the default test runner and to record or replay command lines.
                    two runner classes are available:
                        * test_runnner:OciUtilsTestRunnerRecord
                                This runner will ensure that all command line execution (output , error and exit code ) will be
                                recorded to the repository.
                        * test_runnner:OciUtilsTestRunnerReplay
                                This runner will ensure that all command line execution will be intercepted and replaced
                                by reading output and exit code from the repository (i.e form a previous use of the OciUtilsTestRunnerRecord runner)
                    These custom runners will allow tests to be executed without any platform requirement. I.e CLIs and the results
                    will be "replayed" as if they were actually run on the platform. Test relying on specific platform resource or CLI behavior
                    can then be run anywhere.

        example
            python3 setup.py oci_tests --test-runner=test_runnner:OciUtilsTestRunnerRecord --tests-base=/tmp/oci-tests
            python3 setup.py oci_tests --test-runner=test_runnner:OciUtilsTestRunnerReplay --tests-base=/tmp/oci-tests

  Validation tests
        This will generate an OCI instance and push oci_utils tests and run them
            on the newly created instance.

        requirements:
                1. install terraform on your test machine
                      https://learn.hashicorp.com/terraform/getting-started/install.html
                2. configure the OCI cli client


        Run the validation:
            python3 setup.py oci_validation_tests [--rpm-dir=...] --tf-config=...

            By default the command create all the RPMS. You can specify a directoy which already contains (only) the RPMS using
            the rpm-dir options (IMPORTANT NOTE : entire directory is copied over. Place rpms into a dedicated directory)
            The command requires a terraform cofiguration file which contains all required properties.
            A template file is available in tests/temaplates/instance.tfvars.json


            What is expected in instance.tfvars.json ?
                tests_tools_dir: path to directory containing some tests conf scripts
                tenancy_ocid: The tenancy OCID in which to create the instance  (like for OCI sdk usage)
                user_ocid : User OCID to use for remote connection (like for OCI sdk usage)
                fingerprint: key fingerprint,
                private_key_path: EPM format private key (like for OCI sdk usage)
                region: OCI region to use for instance creation ex :"uk-london-1"
                compartment_id: The compartment OCID in which to create the instance  (like for OCI sdk usage)
                availability_domain_id: the availabilityu domain to hist the instance ex "VkEH:UK-LONDON-1-AD-1"
                subnet_id: VCN subnet OCID for instance primary connection
                instance_shape: the instance shape to use ex : "VM.Standard.E2.1"
                instance_image_ocid: instance image ocid
                ssh_private_key_path: local ssh private key
                ssh_authorized_key_path: local ssh authorized key
                ssh_user: user to use liekly "opc"
                dns_search_domains: dns search order,
                dns_server_ip: dns server,
                http_proxy_url: http proxy url,
                https_proxy_url: https proxy url

            #cp tests/templates/instance.tfvars.json /tmp/
            #python3 setup.py oci_validation_tests --tf-config=/tmp/instance.tfvars.json

            In case of success, the instance is automatically destroyed unless the '--keep-instance' option
            is used.


        See resources information:
            #terraform output
        destroy resources:
            #terraform destroy -var oci_utils_rpms_dir=""  -var-file=tests/templates/instance.tfvars.json tools/provisionning/test_instance/


